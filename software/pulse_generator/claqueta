/*
En este ejemplo, utilizando el timer1 en modo de trabajo fastPWM se ha implementando
una funcion startBurst que permite enviar un tren de impulsos (n_pulses) 
a una determinada frecuencia y duty_cycle. El estado inicial y final del tren de pulsos es LOW.
Tambien se ha implementado una primera aproximación de la función startBurtsTrain que permite 
enviar un tren de bursts separados un determinado tiempo. Esta primera aproximación es un 
poco burda ya que hace uso de la función delay lo que provoca desajustes temporales entre 
trenes de pulsos, especialmente cuando el delay entre trenes se aproxima a 1 ms.

pinUS (9) es la salida US
pinIR (2) es el pin IR
pinVIS (7) es el pin VIS
pinButtonStart (2) es el start

*/
/*
  Hardware: Arduino UNO v3
  
*/

#define             pinUS 9                           //timer 1 A (UV)
#define             pinIR 8                           //IR output pin
#define             pinVIS 7                          //VIS output pin
#define             pinButtonStart 2                  //start button input pin

unsigned const int  timer1Prescaler = 1;              //valid values are: {1, 8, 64, 256, 1024}
unsigned const long desired_freq = 40000;             //40000Hz -> T=25us, 25000Hz -> 40us. Valid freq 245 Hz - 8000000 . Recommended 245 - 1000000 
const byte          desired_dutycycle = 10;           // valid values [1,99]. Remember that is inverted. pe 10 is 10% off
  
unsigned long       n_pulses_per_burst = 0;           //don't touch it
unsigned long       desired_n_pulses_per_burst = 10;  //don't touch it

unsigned const long pulsesPerBurst[] = {25000, 10000, 5000};  //max cell value 2^32 - 1. Max number of cells 512, recommended 200
unsigned const int  nBursts = 3;                              // Is the size of the previous array
unsigned const long delayBetweenBursts = 500;                 // in ms

unsigned const long debounceDelay = 5000;             // in ms
unsigned long       lastTimeButtonPressed = 0;        // in ms

bool                lastButtonState = HIGH;



void initPortAsOutput(const byte pinNumber, 
                      const bool initialState){
  //Initialize pins
  pinMode(pinNumber, OUTPUT);
  digitalWrite(pinNumber, initialState);
}

void initPortAsInput( const byte pinNumber, 
                      const byte mode){
  //Initialize pins
  pinMode(pinNumber, mode);
}

void initTimer1(unsigned const long cpu_freq, 
                unsigned const int  prescaler, 
                unsigned const long freq, 
                const byte          dutycicle){

  TCCR1A = 0;
  TCCR1B = 0;
  
  // Set output compare mode
  //TCCR1A |= (1 << COM1A1); //non-inverting mode
  
  //inverting mode. We work as inverting because in non-inverting mode we have
  //indesirable side effects like a last pulse that shouldn't be there or 
  //an indesirable elongation of the first pulse on every burst.
  //Then, you have to take into account that duty_cyce must be also inverted
  TCCR1A |= (1 << COM1A1) | (1 << COM1A0); 
  
  //Configure the operation mode (fast PWM Mode 14)
  TCCR1A |= (1 << WGM11);
  TCCR1B |= (1 << WGM12);
  TCCR1B |= (1 << WGM13);
  
  //Configure the output compare register A and I
  // Set PWM frequency/TOP value
  
  ICR1 = (cpu_freq / (prescaler*freq)) - 1;
  //Serial.print("ICR1 = ");
  //Serial.println(ICR1);
  // Set the duty cycle
  OCR1A = ICR1 * (dutycicle/100.0) ;
  //Serial.print("OCR1A = ");
  //Serial.println(OCR1A);  
  //Enable Timer1 overflow Interrupt
  TIMSK1 = TIMSK1 | (1<<TOIE1);
}

void startTimer1(unsigned int prescaler){
  TCCR1B = TCCR1B | (1<<CS10);              //prescaler a 1. fclk de 16.000.000 Hz (0.0625us)  
  //TCCR1B = TCCR1B | (1<<CS11);              //prescaler a 8. fclk de  2.000.000 Hz (0.5us)  
  //TCCR1B = TCCR1B | (1<<CS11) | (1<<CS10);  //prescaler a 64. fclk de   250.000 Hz (4us)  
  //TCCR1B = TCCR1B | (1<<CS12);              //prescaler a 256. fclk de   62.500 Hz (16us)  
  //TCCR1B = TCCR1B | (1<<CS12) | (1<<CS10);    //prescaler a 1024. fclk de  15.625 Hz (64us) 
}


//Timer1 Overflow ISR
//Este timer es el que genera el burst o tren de pulsos

ISR(TIMER1_OVF_vect)
{
  //Existe un pequeño retardo hasta que la salida se desconecta. 
  //Esto es debido a que el timer sigue contando cuando entramos en esta función y en consecuencia 
  //la la salida se pone a 1.
  //Eso da lugar a un pequeño pulso
  
  //En resumen. Al llegar a la siguiente linea el TCNT1 ya va aprox por 72 counts lo 
  //que da lugar a un pulso de aprox 0.0625us x 72 = 4.5us aprox.
  if (n_pulses_per_burst>=desired_n_pulses_per_burst) 
  {
    TCCR1A &= 0b00111111;         //Disconnect the output 
    TCCR1B = TCCR1B & 0b11111110; //stop the timer1
    n_pulses_per_burst = 0;
    TCNT1 = 0;                    //reset the timer
    //Here we have to switchoff the IR Led
    digitalWrite(pinIR, LOW);
  }
  else
  {
    n_pulses_per_burst++;
  }
}

void startBurst(const byte          pinNumber,
                unsigned const long cpu_freq,
                unsigned const int  timer_prescaler,
                unsigned const long desired_freq,
                const byte          desired_dutycycle
               )
{
  cli();  // disable all interrupts
  initPortAsOutput(pinNumber, LOW);
  initTimer1(cpu_freq, timer_prescaler, desired_freq, desired_dutycycle);
  sei(); // enable global interrupts
  startTimer1(timer_prescaler);
}

void startBurstTrain( unsigned const int    nBursts, 
                      unsigned const long*  pulsesPerBurst, 
                      unsigned const long   delayBetweenBursts,
                      const byte            pinNumber,
                      unsigned const long   cpu_freq,
                      unsigned const int    timer_prescaler,
                      unsigned const long   desired_freq,
                      const byte            desired_dutycycle
                    )
{
  //switch on the visible led
  digitalWrite(pinVIS,HIGH);
  
  for(int i = 0; i<nBursts; i++)
  {
    desired_n_pulses_per_burst = pulsesPerBurst[i]-1;
    double delayCorrection = (1000/(double)desired_freq)*desired_n_pulses_per_burst; //(1000/(double)desired_freq) is burst period in ms
    
    //Here we have also to switch-on the IR led
    digitalWrite(pinIR, HIGH);
    
    startBurst(pinUS, F_CPU, timer1Prescaler, desired_freq, desired_dutycycle);
    
    //for delays arround 1ms the delayCorrection will bw important. As a result we will have bursts not equally time spaced
    //for delays greater than 1ms the delayCorrection will be not important.
    /*Serial.print("delayBetweenBursts = ");
    Serial.println(delayBetweenBursts);
    Serial.print("delayCorrection = ");
    Serial.println(delayCorrection);
    Serial.print("total delay = ");
    Serial.println(delayBetweenBursts + delayCorrection);*/
    
    delay(delayBetweenBursts + delayCorrection); //delay aprox
  }
  
  //switch on the visible led
  digitalWrite(pinVIS,LOW);
}

void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);  
  initPortAsOutput(pinIR, LOW);
  initPortAsOutput(pinVIS, LOW);
  initPortAsInput(pinButtonStart,INPUT);
}

void loop() 
{
  // read the falling flank of the pushbutton with boundless mechanism:
  bool buttonState = digitalRead(pinButtonStart);
  
  if (buttonState!=lastButtonState & buttonState==LOW)
  {
    //falling flank detected
    unsigned long actualTime = millis();
    if ((actualTime - lastTimeButtonPressed) > debounceDelay)
    {
      lastTimeButtonPressed = actualTime;
      startBurstTrain(nBursts, pulsesPerBurst, delayBetweenBursts, pinUS, F_CPU, timer1Prescaler, desired_freq, desired_dutycycle);
    }
    
  }
  lastButtonState = buttonState;
  
}